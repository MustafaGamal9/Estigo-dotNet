// <auto-generated />
using System;
using Estigo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Estigo.Migrations
{
    [DbContext(typeof(EstigoDbContext))]
    [Migration("20250410181823_fixSeed")]
    partial class fixSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Estigo.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Estigo.Models.BankOfQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("BankOfQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "A",
                            ExamId = 11,
                            OptionA = "Paris",
                            OptionB = "London",
                            OptionC = "Rome",
                            OptionD = "Berlin",
                            QuestionText = "What is the capital of France?"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = "B",
                            ExamId = 11,
                            OptionA = "Earth",
                            OptionB = "Mars",
                            OptionC = "Jupiter",
                            OptionD = "Saturn",
                            QuestionText = "Which planet is known as the Red Planet?"
                        },
                        new
                        {
                            Id = 3,
                            CorrectAnswer = "C",
                            ExamId = 11,
                            OptionA = "10",
                            OptionB = "11",
                            OptionC = "12",
                            OptionD = "13",
                            QuestionText = "What is 5 + 7?"
                        },
                        new
                        {
                            Id = 4,
                            CorrectAnswer = "C",
                            ExamId = 11,
                            OptionA = "Java",
                            OptionB = "Swift",
                            OptionC = "Kotlin",
                            OptionD = "C#",
                            QuestionText = "Which language is primarily used for Android development?"
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = "A",
                            ExamId = 11,
                            OptionA = "H2O",
                            OptionB = "O2",
                            OptionC = "CO2",
                            OptionD = "NaCl",
                            QuestionText = "What is the chemical symbol for water?"
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = "B",
                            ExamId = 12,
                            OptionA = "8",
                            OptionB = "9",
                            OptionC = "10",
                            OptionD = "7",
                            QuestionText = "What is the square root of 81?"
                        },
                        new
                        {
                            Id = 7,
                            CorrectAnswer = "B",
                            ExamId = 12,
                            OptionA = "Vincent van Gogh",
                            OptionB = "Leonardo da Vinci",
                            OptionC = "Pablo Picasso",
                            OptionD = "Michelangelo",
                            QuestionText = "Who painted the Mona Lisa?"
                        },
                        new
                        {
                            Id = 8,
                            CorrectAnswer = "D",
                            ExamId = 12,
                            OptionA = "Brain",
                            OptionB = "Lungs",
                            OptionC = "Liver",
                            OptionD = "Heart",
                            QuestionText = "Which organ pumps blood through the body?"
                        },
                        new
                        {
                            Id = 9,
                            CorrectAnswer = "C",
                            ExamId = 12,
                            OptionA = "Earth",
                            OptionB = "Mars",
                            OptionC = "Jupiter",
                            OptionD = "Saturn",
                            QuestionText = "What is the largest planet in our solar system?"
                        },
                        new
                        {
                            Id = 10,
                            CorrectAnswer = "B",
                            ExamId = 12,
                            OptionA = "Oxygen",
                            OptionB = "Hydrogen",
                            OptionC = "Helium",
                            OptionD = "Carbon",
                            QuestionText = "Which element has the atomic number 1?"
                        });
                });

            modelBuilder.Entity("Estigo.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Estigo.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("ChapterId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("Estigo.Models.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseId"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("courseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            courseId = 1,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Algebra | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to algebraic concepts",
                            Logo = "http://est.runasp.net/algebra.jpg",
                            Price = 199,
                            TeacherId = "t1"
                        },
                        new
                        {
                            courseId = 2,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Calculus | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of differential calculus",
                            Logo = "http://est.runasp.net/calculas.jpeg",
                            Price = 199,
                            TeacherId = "t2"
                        },
                        new
                        {
                            courseId = 3,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Geometry | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of geometric shapes and theorems",
                            Logo = "http://est.runasp.net/geo.jpeg",
                            Price = 189,
                            TeacherId = "t1"
                        },
                        new
                        {
                            courseId = 4,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Trigonometry | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Understanding angles and trigonometric functions",
                            Logo = "http://est.runasp.net/trig.jpeg",
                            Price = 189,
                            TeacherId = "t2"
                        },
                        new
                        {
                            courseId = 5,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Statistics | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to data analysis and probability",
                            Logo = "http://est.runasp.net/stat.jpeg",
                            Price = 179,
                            TeacherId = "t1"
                        },
                        new
                        {
                            courseId = 6,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Probability | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exploring probability theories and applications",
                            Logo = "http://est.runasp.net/jpeg",
                            Price = 179,
                            TeacherId = "t2"
                        },
                        new
                        {
                            courseId = 7,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Discrete Math | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of logic, set theory, and combinatorics",
                            Logo = "http://est.runasp.net/disc.jpeg",
                            Price = 189,
                            TeacherId = "t1"
                        },
                        new
                        {
                            courseId = 8,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Mechanics | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to Newtonian mechanics",
                            Logo = "http://est.runasp.net/mecha.jpg",
                            Price = 149,
                            TeacherId = "t3"
                        },
                        new
                        {
                            courseId = 9,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Electricity | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of electric circuits and fields",
                            Logo = "http://est.runasp.net/elec.jpg",
                            Price = 149,
                            TeacherId = "t4"
                        },
                        new
                        {
                            courseId = 10,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Magnetism | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Principles of magnetic forces and fields",
                            Logo = "http://est.runasp.net/iron.jpg",
                            Price = 159,
                            TeacherId = "t5"
                        },
                        new
                        {
                            courseId = 11,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Optics | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of light behavior and properties",
                            Logo = "http://est.runasp.net/optics.jpeg",
                            Price = 159,
                            TeacherId = "t3"
                        },
                        new
                        {
                            courseId = 12,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Thermodynamics | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of heat and energy",
                            Logo = "http://est.runasp.net/thermo.jpeg",
                            Price = 169,
                            TeacherId = "t4"
                        },
                        new
                        {
                            courseId = 13,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Quantum Physics | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to quantum theory",
                            Logo = "http://est.runasp.net/quant.jpeg",
                            Price = 169,
                            TeacherId = "t5"
                        },
                        new
                        {
                            courseId = 14,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Relativity | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Concepts of special and general relativity",
                            Logo = "http://est.runasp.net/rela.jpg",
                            Price = 169,
                            TeacherId = "t3"
                        },
                        new
                        {
                            courseId = 15,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Cell Biology | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of cell structure and function",
                            Logo = "http://est.runasp.net/cell.jpg",
                            Price = 179,
                            TeacherId = "t6"
                        },
                        new
                        {
                            courseId = 16,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Genetics | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to heredity and DNA",
                            Logo = "http://est.runasp.net/gena.jpeg",
                            Price = 179,
                            TeacherId = "t7"
                        },
                        new
                        {
                            courseId = 17,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Movement | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Principles of Movement",
                            Logo = "http://est.runasp.net/move.jpeg",
                            Price = 189,
                            TeacherId = "t6"
                        },
                        new
                        {
                            courseId = 18,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Ecology | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of ecosystems and environment",
                            Logo = "http://est.runasp.net/eco.jpg",
                            Price = 189,
                            TeacherId = "t7"
                        },
                        new
                        {
                            courseId = 19,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Botany | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of plant biology and physiology",
                            Logo = "http://est.runasp.net/elec.jpg",
                            Price = 179,
                            TeacherId = "t6"
                        },
                        new
                        {
                            courseId = 20,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Zoology | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to animal biology",
                            Logo = "http://est.runasp.net/zoo.jpg",
                            Price = 179,
                            TeacherId = "t7"
                        },
                        new
                        {
                            courseId = 21,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Microbiology | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of microorganisms and their roles",
                            Logo = "http://est.runasp.net/micro.jpg",
                            Price = 189,
                            TeacherId = "t6"
                        },
                        new
                        {
                            courseId = 22,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Organic Chemistry | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to organic compounds",
                            Logo = "http://est.runasp.net/organic.jpeg",
                            Price = 159,
                            TeacherId = "t8"
                        },
                        new
                        {
                            courseId = 23,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Inorganic Chemistry | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of inorganic substances",
                            Logo = "http://est.runasp.net/inorganic.jpeg",
                            Price = 159,
                            TeacherId = "t9"
                        },
                        new
                        {
                            courseId = 24,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Physical Chemistry | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of chemical thermodynamics and kinetics",
                            Logo = "http://est.runasp.net/physChem.jpg",
                            Price = 169,
                            TeacherId = "t10"
                        },
                        new
                        {
                            courseId = 25,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Analytical Chemistry | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Techniques for chemical analysis",
                            Logo = "http://est.runasp.net/analyt.png",
                            Price = 169,
                            TeacherId = "t11"
                        },
                        new
                        {
                            courseId = 26,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Biochemistry | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chemical processes within living organisms",
                            Logo = "http://est.runasp.net/biochem.jpeg",
                            Price = 179,
                            TeacherId = "t8"
                        },
                        new
                        {
                            courseId = 27,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Environmental Chemistry | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chemistry in environmental processes",
                            Logo = "http://est.runasp.net/env.jpg",
                            Price = 179,
                            TeacherId = "t9"
                        },
                        new
                        {
                            courseId = 28,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Theoretical Chemistry | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conceptual frameworks of chemical behavior",
                            Logo = "http://est.runasp.net/theo.jpeg",
                            Price = 169,
                            TeacherId = "t10"
                        },
                        new
                        {
                            courseId = 29,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Literature | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exploring classic and modern literature",
                            Logo = "http://est.runasp.net/lit.jpg",
                            Price = 129,
                            TeacherId = "t12"
                        },
                        new
                        {
                            courseId = 30,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Creative Writing | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop storytelling and narrative skills",
                            Logo = "http://est.runasp.net/write.jpg",
                            Price = 129,
                            TeacherId = "t13"
                        },
                        new
                        {
                            courseId = 31,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Grammar & Composition | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mastering the rules of English grammar",
                            Logo = "http://est.runasp.net/gram.jpg",
                            Price = 119,
                            TeacherId = "t12"
                        },
                        new
                        {
                            courseId = 32,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Poetry Analysis | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study and analysis of poetry",
                            Logo = "http://est.runasp.net/poe.png",
                            Price = 119,
                            TeacherId = "t13"
                        },
                        new
                        {
                            courseId = 33,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Drama & Theater | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to dramatic literature and performance",
                            Logo = "http://est.runasp.net/drama.jpg",
                            Price = 129,
                            TeacherId = "t12"
                        },
                        new
                        {
                            courseId = 34,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Fiction Writing | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Techniques for writing compelling fiction",
                            Logo = "http://est.runasp.net/fiction.jpeg",
                            Price = 129,
                            TeacherId = "t13"
                        },
                        new
                        {
                            courseId = 35,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Non-fiction Writing | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Crafting engaging non-fiction narratives",
                            Logo = "http://est.runasp.net/nonfic.jpg",
                            Price = 119,
                            TeacherId = "t12"
                        });
                });

            modelBuilder.Entity("Estigo.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ExamDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("courseId");

                    b.HasIndex("lessonId")
                        .IsUnique();

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6076),
                            ExamDescription = "Test your knowledge of C# basics.",
                            ExamTitle = "Exam: Introduction to C#",
                            Grade = "Not Graded",
                            courseId = 1,
                            lessonId = 11
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6712),
                            ExamDescription = "Variables and types quiz.",
                            ExamTitle = "Exam: Variables and Data Types",
                            Grade = "Not Graded",
                            courseId = 1,
                            lessonId = 12
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6715),
                            ExamDescription = "Control flow evaluation.",
                            ExamTitle = "Exam: Control Structures",
                            Grade = "Not Graded",
                            courseId = 1,
                            lessonId = 13
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6717),
                            ExamDescription = "Function usage test.",
                            ExamTitle = "Exam: Functions",
                            Grade = "Not Graded",
                            courseId = 1,
                            lessonId = 14
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6719),
                            ExamDescription = "OOP concepts in C#.",
                            ExamTitle = "Exam: Classes and Objects",
                            Grade = "Not Graded",
                            courseId = 1,
                            lessonId = 15
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6721),
                            ExamDescription = "Test your knowledge of C# basics.",
                            ExamTitle = "Exam: Introduction to C#",
                            Grade = "Not Graded",
                            courseId = 2,
                            lessonId = 16
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6723),
                            ExamDescription = "Variables and types quiz.",
                            ExamTitle = "Exam: Variables and Data Types",
                            Grade = "Not Graded",
                            courseId = 2,
                            lessonId = 17
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6725),
                            ExamDescription = "Control flow evaluation.",
                            ExamTitle = "Exam: Control Structures",
                            Grade = "Not Graded",
                            courseId = 2,
                            lessonId = 18
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6729),
                            ExamDescription = "Function usage test.",
                            ExamTitle = "Exam: Functions",
                            Grade = "Not Graded",
                            courseId = 2,
                            lessonId = 19
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 4, 10, 18, 18, 22, 759, DateTimeKind.Utc).AddTicks(6731),
                            ExamDescription = "OOP concepts in C#.",
                            ExamTitle = "Exam: Classes and Objects",
                            Grade = "Not Graded",
                            courseId = 2,
                            lessonId = 20
                        });
                });

            modelBuilder.Entity("Estigo.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId");

                    b.HasIndex("courseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Estigo.Models.StudentExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExamDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExamResults");
                });

            modelBuilder.Entity("Estigo.Models.lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lessonId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int?>("examId")
                        .HasColumnType("int");

                    b.Property<string>("lessonContent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("lessonDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("lessonTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lessonVideo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("lessonId");

                    b.HasIndex("courseId");

                    b.ToTable("lessons");

                    b.HasData(
                        new
                        {
                            lessonId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 1,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "This lesson covers the basics of C# programming.",
                            lessonTitle = "Introduction to C#",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 1,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn about variables and data types in C#.",
                            lessonTitle = "C# Variables and Data Types",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 1,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn about control structures in C#.",
                            lessonTitle = "C# Control Structures",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 1,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn how to define and call functions in C#.",
                            lessonTitle = "C# Functions",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 1,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn about classes and objects in C#.",
                            lessonTitle = "C# Classes and Objects",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 2,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "This lesson covers the basics of C# programming.",
                            lessonTitle = "Introduction to C#",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 2,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn about variables and data types in C#.",
                            lessonTitle = "C# Variables and Data Types",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 2,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn about control structures in C#.",
                            lessonTitle = "C# Control Structures",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 2,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn how to define and call functions in C#.",
                            lessonTitle = "C# Functions",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        },
                        new
                        {
                            lessonId = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            courseId = 2,
                            lessonContent = "This is the content of the lesson.",
                            lessonDescription = "Learn about classes and objects in C#.",
                            lessonTitle = "C# Classes and Objects",
                            lessonVideo = "http://est.runasp.net/vv.mp4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyCourse", b =>
                {
                    b.Property<int>("MycourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MycourseId"));

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MycourseId");

                    b.HasIndex("courseId");

                    b.HasIndex("StudentId");

                    b.ToTable("MyCourses", (string)null);
                });

            modelBuilder.Entity("Estigo.Models.Admin", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Estigo.Models.Parent", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("Estigo.Models.Student", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Track")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Estigo.Models.Teacher", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.Property<int?>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Teacher");

                    b.HasData(
                        new
                        {
                            Id = "t1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db05f9cf-d26c-4a5f-8f8d-a50526612dce",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "math1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mahmoud",
                            NormalizedEmail = "MATH1@ESTIGO.COM",
                            NormalizedUserName = "MATH1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "3097e660-0a4e-4132-85a7-f322819862ae",
                            TwoFactorEnabled = false,
                            UserName = "math1@estigo.com",
                            Notes = "Expert in Algebra",
                            Subject = "Mathematics",
                            image = "http://est.runasp.net/mahmoud.jpg"
                        },
                        new
                        {
                            Id = "t2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e303201a-efe3-4fdc-a1b5-7b107a19a211",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "math2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mousa",
                            NormalizedEmail = "MATH2@ESTIGO.COM",
                            NormalizedUserName = "MATH2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "0213ee65-1874-4650-b73f-4c9608965e03",
                            TwoFactorEnabled = false,
                            UserName = "math2@estigo.com",
                            Notes = "Specialist in Calculus",
                            Subject = "Mathematics",
                            image = "http://est.runasp.net/b.jpeg"
                        },
                        new
                        {
                            Id = "t3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27e2ad54-f343-4a1d-84aa-1bc5ea2e8b94",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phys1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Amira",
                            NormalizedEmail = "PHYS1@ESTIGO.COM",
                            NormalizedUserName = "PHYS1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "671b8bc3-b094-4d3a-9e3f-0a4e379a0ee9",
                            TwoFactorEnabled = false,
                            UserName = "phys1@estigo.com",
                            Notes = "Specialist in Mechanics",
                            Subject = "Physics",
                            image = "http://est.runasp.net/g.jpeg"
                        },
                        new
                        {
                            Id = "t4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36aa0aab-33ed-49b0-87f1-1a4dd4d1348d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phys2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Noura",
                            NormalizedEmail = "PHYS2@ESTIGO.COM",
                            NormalizedUserName = "PHYS2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "8ed074d7-3d72-4683-a300-815975f103c1",
                            TwoFactorEnabled = false,
                            UserName = "phys2@estigo.com",
                            Notes = "Expert in Electromagnetism",
                            Subject = "Physics",
                            image = "http://est.runasp.net/q.jpg"
                        },
                        new
                        {
                            Id = "t5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf11befe-ea43-4f6c-bc61-fff1c5ad2851",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phys3@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mustafa",
                            NormalizedEmail = "PHYS3@ESTIGO.COM",
                            NormalizedUserName = "PHYS3@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "3829d755-bbe2-4be0-9b65-7e68b346f107",
                            TwoFactorEnabled = false,
                            UserName = "phys3@estigo.com",
                            Notes = "Enthusiast in Quantum Physics",
                            Subject = "Physics",
                            image = "http://est.runasp.net/b.jpeg"
                        },
                        new
                        {
                            Id = "t6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80c7785a-3777-4821-987a-1176bf7a278a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bio1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Ahmed",
                            NormalizedEmail = "BIO1@ESTIGO.COM",
                            NormalizedUserName = "BIO1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "4909a56b-8348-48c3-9473-eb826364c513",
                            TwoFactorEnabled = false,
                            UserName = "bio1@estigo.com",
                            Notes = "Expert in Cell Biology",
                            Subject = "Biology",
                            image = "http://est.runasp.net/c.jpeg"
                        },
                        new
                        {
                            Id = "t7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12e150b0-72cc-4aac-8564-e85fe1179f5a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bio2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Karim",
                            NormalizedEmail = "BIO2@ESTIGO.COM",
                            NormalizedUserName = "BIO2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "d472ec0f-bfe0-4cd2-919a-503a2265ad1d",
                            TwoFactorEnabled = false,
                            UserName = "bio2@estigo.com",
                            Notes = "Specialist in Genetics",
                            Subject = "Biology",
                            image = "http://est.runasp.net/d.jpeg"
                        },
                        new
                        {
                            Id = "t8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f941f802-f99d-4335-ae98-632c894ab281",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mohamed",
                            NormalizedEmail = "CHEM1@ESTIGO.COM",
                            NormalizedUserName = "CHEM1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "df01d2ae-fc0b-4605-acf9-d35f28636a77",
                            TwoFactorEnabled = false,
                            UserName = "chem1@estigo.com",
                            Notes = "Passionate about Organic Chemistry",
                            Subject = "Chemistry",
                            image = "http://est.runasp.net/f.jpg"
                        },
                        new
                        {
                            Id = "t9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9eddc4e-c7f8-4b98-bda2-5d670d0c7fd8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Noura",
                            NormalizedEmail = "CHEM2@ESTIGO.COM",
                            NormalizedUserName = "CHEM2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "daf143ae-ad98-4ecb-99e3-18ab0d0c58cc",
                            TwoFactorEnabled = false,
                            UserName = "chem2@estigo.com",
                            Notes = "Expert in Inorganic Chemistry",
                            Subject = "Chemistry",
                            image = "http://est.runasp.net/m.jpg"
                        },
                        new
                        {
                            Id = "t10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a39e060-4508-4d45-a4c2-eadab4068ad2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem3@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Fahad",
                            NormalizedEmail = "CHEM3@ESTIGO.COM",
                            NormalizedUserName = "CHEM3@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "03befeca-6629-4fee-9e27-ef71bbaeede9",
                            TwoFactorEnabled = false,
                            UserName = "chem3@estigo.com",
                            Notes = "Skilled in Analytical Chemistry",
                            Subject = "Chemistry",
                            image = "http://est.runasp.net/f.jpg"
                        },
                        new
                        {
                            Id = "t11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d88bcd4d-af67-43ec-9db6-d5057240dfa0",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem4@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Sara",
                            NormalizedEmail = "CHEM4@ESTIGO.COM",
                            NormalizedUserName = "CHEM4@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "2c7c47d3-68b0-4ab5-ba30-71db895e1136",
                            TwoFactorEnabled = false,
                            UserName = "chem4@estigo.com",
                            Notes = "Focused on Physical Chemistry",
                            Subject = "Chemistry",
                            image = "http://est.runasp.net/sarah.jpg"
                        },
                        new
                        {
                            Id = "t12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8171160f-8a46-458e-b453-626a9de628c7",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eng1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Sarah",
                            NormalizedEmail = "ENG1@ESTIGO.COM",
                            NormalizedUserName = "ENG1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "b89ad5f5-c6ff-4f1c-92aa-5ffa51870f9e",
                            TwoFactorEnabled = false,
                            UserName = "eng1@estigo.com",
                            Notes = "Literature Specialist",
                            Subject = "English",
                            image = "http://est.runasp.net/amira.jpg"
                        },
                        new
                        {
                            Id = "t13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6aeeb85e-022d-4e3b-86c3-2084e01229c9",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eng2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "ENG2@ESTIGO.COM",
                            NormalizedUserName = "ENG2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "62d82726-06eb-444d-89f9-e6199b151096",
                            TwoFactorEnabled = false,
                            UserName = "eng2@estigo.com",
                            Notes = "Expert in Creative Writing",
                            Subject = "English",
                            image = "http://est.runasp.net/f.jpg"
                        });
                });

            modelBuilder.Entity("Estigo.Models.BankOfQuestion", b =>
                {
                    b.HasOne("Estigo.Models.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Estigo.Models.Course", b =>
                {
                    b.HasOne("Estigo.Models.Category", null)
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Teacher", "Teacher")
                        .WithMany("CoursesTaught")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Estigo.Models.Exam", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.lesson", "Lesson")
                        .WithOne("Exam")
                        .HasForeignKey("Estigo.Models.Exam", "lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Estigo.Models.Payment", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Estigo.Models.StudentExamResult", b =>
                {
                    b.HasOne("Estigo.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Estigo.Models.lesson", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany("lessons")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyCourse", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Estigo.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Estigo.Models.Course", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("lessons");
                });

            modelBuilder.Entity("Estigo.Models.Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Estigo.Models.lesson", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();
                });

            modelBuilder.Entity("Estigo.Models.Student", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Estigo.Models.Teacher", b =>
                {
                    b.Navigation("CoursesTaught");
                });
#pragma warning restore 612, 618
        }
    }
}
