// <auto-generated />
using System;
using Estigo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Estigo.Migrations
{
    [DbContext(typeof(EstigoDbContext))]
    [Migration("20250402182116_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankOfQuestionExam", b =>
                {
                    b.Property<int>("ExamsId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.HasKey("ExamsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("BankOfQuestionExam");
                });

            modelBuilder.Entity("Estigo.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Estigo.Models.BankOfQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankOfQuestions");
                });

            modelBuilder.Entity("Estigo.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Estigo.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Estigo.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Algebra | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to algebraic concepts",
                            Price = 199,
                            TeacherId = "t1"
                        },
                        new
                        {
                            CourseId = 2,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Calculus | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of differential calculus",
                            Price = 199,
                            TeacherId = "t2"
                        },
                        new
                        {
                            CourseId = 3,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Geometry | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of geometric shapes and theorems",
                            Price = 189,
                            TeacherId = "t1"
                        },
                        new
                        {
                            CourseId = 4,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Trigonometry | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Understanding angles and trigonometric functions",
                            Price = 189,
                            TeacherId = "t2"
                        },
                        new
                        {
                            CourseId = 5,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Statistics | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to data analysis and probability",
                            Price = 179,
                            TeacherId = "t1"
                        },
                        new
                        {
                            CourseId = 6,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Probability | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exploring probability theories and applications",
                            Price = 179,
                            TeacherId = "t2"
                        },
                        new
                        {
                            CourseId = 7,
                            Available = true,
                            CategoryId = 1,
                            CourseTitle = "Discrete Math | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of logic, set theory, and combinatorics",
                            Price = 189,
                            TeacherId = "t1"
                        },
                        new
                        {
                            CourseId = 8,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Mechanics | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to Newtonian mechanics",
                            Price = 149,
                            TeacherId = "t3"
                        },
                        new
                        {
                            CourseId = 9,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Electricity | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of electric circuits and fields",
                            Price = 149,
                            TeacherId = "t4"
                        },
                        new
                        {
                            CourseId = 10,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Magnetism | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Principles of magnetic forces and fields",
                            Price = 159,
                            TeacherId = "t5"
                        },
                        new
                        {
                            CourseId = 11,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Optics | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of light behavior and properties",
                            Price = 159,
                            TeacherId = "t3"
                        },
                        new
                        {
                            CourseId = 12,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Thermodynamics | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of heat and energy",
                            Price = 169,
                            TeacherId = "t4"
                        },
                        new
                        {
                            CourseId = 13,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Quantum Physics | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to quantum theory",
                            Price = 169,
                            TeacherId = "t5"
                        },
                        new
                        {
                            CourseId = 14,
                            Available = true,
                            CategoryId = 2,
                            CourseTitle = "Relativity | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Concepts of special and general relativity",
                            Price = 169,
                            TeacherId = "t3"
                        },
                        new
                        {
                            CourseId = 15,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Cell Biology | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of cell structure and function",
                            Price = 179,
                            TeacherId = "t6"
                        },
                        new
                        {
                            CourseId = 16,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Genetics | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to heredity and DNA",
                            Price = 179,
                            TeacherId = "t7"
                        },
                        new
                        {
                            CourseId = 17,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Evolution | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Principles of biological evolution",
                            Price = 189,
                            TeacherId = "t6"
                        },
                        new
                        {
                            CourseId = 18,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Ecology | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of ecosystems and environment",
                            Price = 189,
                            TeacherId = "t7"
                        },
                        new
                        {
                            CourseId = 19,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Botany | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of plant biology and physiology",
                            Price = 179,
                            TeacherId = "t6"
                        },
                        new
                        {
                            CourseId = 20,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Zoology | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to animal biology",
                            Price = 179,
                            TeacherId = "t7"
                        },
                        new
                        {
                            CourseId = 21,
                            Available = true,
                            CategoryId = 3,
                            CourseTitle = "Microbiology | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basics of microorganisms and their roles",
                            Price = 189,
                            TeacherId = "t6"
                        },
                        new
                        {
                            CourseId = 22,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Organic Chemistry | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to organic compounds",
                            Price = 159,
                            TeacherId = "t8"
                        },
                        new
                        {
                            CourseId = 23,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Inorganic Chemistry | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of inorganic substances",
                            Price = 159,
                            TeacherId = "t9"
                        },
                        new
                        {
                            CourseId = 24,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Physical Chemistry | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study of chemical thermodynamics and kinetics",
                            Price = 169,
                            TeacherId = "t10"
                        },
                        new
                        {
                            CourseId = 25,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Analytical Chemistry | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Techniques for chemical analysis",
                            Price = 169,
                            TeacherId = "t11"
                        },
                        new
                        {
                            CourseId = 26,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Biochemistry | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chemical processes within living organisms",
                            Price = 179,
                            TeacherId = "t8"
                        },
                        new
                        {
                            CourseId = 27,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Environmental Chemistry | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chemistry in environmental processes",
                            Price = 179,
                            TeacherId = "t9"
                        },
                        new
                        {
                            CourseId = 28,
                            Available = true,
                            CategoryId = 4,
                            CourseTitle = "Theoretical Chemistry | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conceptual frameworks of chemical behavior",
                            Price = 169,
                            TeacherId = "t10"
                        },
                        new
                        {
                            CourseId = 29,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Literature | Unit 1",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exploring classic and modern literature",
                            Price = 129,
                            TeacherId = "t12"
                        },
                        new
                        {
                            CourseId = 30,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Creative Writing | Unit 2",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop storytelling and narrative skills",
                            Price = 129,
                            TeacherId = "t13"
                        },
                        new
                        {
                            CourseId = 31,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Grammar & Composition | Unit 3",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mastering the rules of English grammar",
                            Price = 119,
                            TeacherId = "t12"
                        },
                        new
                        {
                            CourseId = 32,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Poetry Analysis | Unit 4",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study and analysis of poetry",
                            Price = 119,
                            TeacherId = "t13"
                        },
                        new
                        {
                            CourseId = 33,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Drama & Theater | Unit 5",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to dramatic literature and performance",
                            Price = 129,
                            TeacherId = "t12"
                        },
                        new
                        {
                            CourseId = 34,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Fiction Writing | Unit 6",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Techniques for writing compelling fiction",
                            Price = 129,
                            TeacherId = "t13"
                        },
                        new
                        {
                            CourseId = 35,
                            Available = true,
                            CategoryId = 5,
                            CourseTitle = "Non-fiction Writing | Unit 7",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Crafting engaging non-fiction narratives",
                            Price = 119,
                            TeacherId = "t12"
                        });
                });

            modelBuilder.Entity("Estigo.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ExamDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("courseId");

                    b.HasIndex("lessonId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Estigo.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Estigo.Models.StudentExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExamDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExamResults");
                });

            modelBuilder.Entity("Estigo.Models.lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lessonId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("chapterId")
                        .HasColumnType("int");

                    b.Property<int>("examId")
                        .HasColumnType("int");

                    b.Property<string>("lessonContent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("lessonDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("lessonTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lessonVideo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("lessonId");

                    b.HasIndex("chapterId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyCourse", b =>
                {
                    b.Property<int>("MyCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MyCourseId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MyCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("MyCourses", (string)null);
                });

            modelBuilder.Entity("Estigo.Models.Admin", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Estigo.Models.Parent", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("Estigo.Models.Student", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Track")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Estigo.Models.Teacher", b =>
                {
                    b.HasBaseType("Estigo.Models.ApplicationUser");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("image")
                        .HasColumnType("varbinary(max)");

                    b.HasDiscriminator().HasValue("Teacher");

                    b.HasData(
                        new
                        {
                            Id = "t1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf612486-09e6-4c38-85dd-01724e54cac1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "math1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mahmoud",
                            NormalizedEmail = "MATH1@ESTIGO.COM",
                            NormalizedUserName = "MATH1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "d2705691-d5c1-48ec-b7fa-ee48f77954fa",
                            TwoFactorEnabled = false,
                            UserName = "math1@estigo.com",
                            Notes = "Expert in Algebra",
                            Subject = "Mathematics"
                        },
                        new
                        {
                            Id = "t2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0628f31a-f890-418c-9d8f-9d08f6dc43da",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "math2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mousa",
                            NormalizedEmail = "MATH2@ESTIGO.COM",
                            NormalizedUserName = "MATH2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "b59f49f0-a906-4d92-a7e4-153cfd741258",
                            TwoFactorEnabled = false,
                            UserName = "math2@estigo.com",
                            Notes = "Specialist in Calculus",
                            Subject = "Mathematics"
                        },
                        new
                        {
                            Id = "t3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5120645-4776-4428-bb39-dfe3be2f7586",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phys1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Amira",
                            NormalizedEmail = "PHYS1@ESTIGO.COM",
                            NormalizedUserName = "PHYS1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "41332fc2-7665-4c25-a224-1b7bd66c60cf",
                            TwoFactorEnabled = false,
                            UserName = "phys1@estigo.com",
                            Notes = "Specialist in Mechanics",
                            Subject = "Physics"
                        },
                        new
                        {
                            Id = "t4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d32f336d-4d3b-4aa7-8b89-93603a69bee8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phys2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Noura",
                            NormalizedEmail = "PHYS2@ESTIGO.COM",
                            NormalizedUserName = "PHYS2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "44e719f0-4621-4ec7-9df5-395bf2f372c9",
                            TwoFactorEnabled = false,
                            UserName = "phys2@estigo.com",
                            Notes = "Expert in Electromagnetism",
                            Subject = "Physics"
                        },
                        new
                        {
                            Id = "t5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29870918-ad9e-4853-a909-7364d90f3d7d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phys3@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mustafa",
                            NormalizedEmail = "PHYS3@ESTIGO.COM",
                            NormalizedUserName = "PHYS3@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "ac148edd-e82e-4134-85c3-027c35d0934f",
                            TwoFactorEnabled = false,
                            UserName = "phys3@estigo.com",
                            Notes = "Enthusiast in Quantum Physics",
                            Subject = "Physics"
                        },
                        new
                        {
                            Id = "t6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60789199-6423-433b-825c-f602b3ab2c74",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bio1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Ahmed",
                            NormalizedEmail = "BIO1@ESTIGO.COM",
                            NormalizedUserName = "BIO1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "afbb4b43-d28d-4e7d-8985-c4ecc866c87e",
                            TwoFactorEnabled = false,
                            UserName = "bio1@estigo.com",
                            Notes = "Expert in Cell Biology",
                            Subject = "Biology"
                        },
                        new
                        {
                            Id = "t7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08a77e8f-faaf-4cea-9215-9330e6aff2ee",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bio2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Karim",
                            NormalizedEmail = "BIO2@ESTIGO.COM",
                            NormalizedUserName = "BIO2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "126bfc1a-a78c-448a-bbc1-7a64b96f15a5",
                            TwoFactorEnabled = false,
                            UserName = "bio2@estigo.com",
                            Notes = "Specialist in Genetics",
                            Subject = "Biology"
                        },
                        new
                        {
                            Id = "t8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "115d9513-04a2-4648-b159-51e544679e5b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Mohamed",
                            NormalizedEmail = "CHEM1@ESTIGO.COM",
                            NormalizedUserName = "CHEM1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "3f9e426b-0a66-49cf-b028-ceaae62bc4fc",
                            TwoFactorEnabled = false,
                            UserName = "chem1@estigo.com",
                            Notes = "Passionate about Organic Chemistry",
                            Subject = "Chemistry"
                        },
                        new
                        {
                            Id = "t9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e41eb8-a0a0-4a28-ab46-78951798ad47",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Noura",
                            NormalizedEmail = "CHEM2@ESTIGO.COM",
                            NormalizedUserName = "CHEM2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "521485cd-f33e-4f01-8961-c1b79175b6ba",
                            TwoFactorEnabled = false,
                            UserName = "chem2@estigo.com",
                            Notes = "Expert in Inorganic Chemistry",
                            Subject = "Chemistry"
                        },
                        new
                        {
                            Id = "t10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "327bd85c-a367-47ff-b7ec-3e0433771076",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem3@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Fahad",
                            NormalizedEmail = "CHEM3@ESTIGO.COM",
                            NormalizedUserName = "CHEM3@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "929b18d0-6d13-47ae-b40f-057c8911e7b4",
                            TwoFactorEnabled = false,
                            UserName = "chem3@estigo.com",
                            Notes = "Skilled in Analytical Chemistry",
                            Subject = "Chemistry"
                        },
                        new
                        {
                            Id = "t11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b22afee-275d-486b-8a75-56e78ef7fe95",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chem4@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Sara",
                            NormalizedEmail = "CHEM4@ESTIGO.COM",
                            NormalizedUserName = "CHEM4@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "345852ef-3850-49c0-8f76-22f188a011ef",
                            TwoFactorEnabled = false,
                            UserName = "chem4@estigo.com",
                            Notes = "Focused on Physical Chemistry",
                            Subject = "Chemistry"
                        },
                        new
                        {
                            Id = "t12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee472e5d-da05-4d97-9be5-6fa222778fe5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eng1@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Sarah",
                            NormalizedEmail = "ENG1@ESTIGO.COM",
                            NormalizedUserName = "ENG1@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "44cd2c20-7b09-4f16-b4c9-d0a8c0c6949e",
                            TwoFactorEnabled = false,
                            UserName = "eng1@estigo.com",
                            Notes = "Literature Specialist",
                            Subject = "English"
                        },
                        new
                        {
                            Id = "t13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93714b7b-bbc9-4347-af7d-4e2b1ffaf3e3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eng2@estigo.com",
                            EmailConfirmed = false,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "ENG2@ESTIGO.COM",
                            NormalizedUserName = "ENG2@ESTIGO.COM",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            SecurityStamp = "1965fa38-3ccb-4af1-aea1-423a994e091e",
                            TwoFactorEnabled = false,
                            UserName = "eng2@estigo.com",
                            Notes = "Expert in Creative Writing",
                            Subject = "English"
                        });
                });

            modelBuilder.Entity("BankOfQuestionExam", b =>
                {
                    b.HasOne("Estigo.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.BankOfQuestion", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Estigo.Models.Chapter", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Estigo.Models.Course", b =>
                {
                    b.HasOne("Estigo.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Teacher", "Teacher")
                        .WithMany("CoursesTaught")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Estigo.Models.Exam", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.lesson", "Lesson")
                        .WithOne("Exam")
                        .HasForeignKey("Estigo.Models.Exam", "lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Estigo.Models.Payment", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Estigo.Models.StudentExamResult", b =>
                {
                    b.HasOne("Estigo.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Estigo.Models.lesson", b =>
                {
                    b.HasOne("Estigo.Models.Chapter", "Chapter")
                        .WithMany("lessons")
                        .HasForeignKey("chapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Estigo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyCourse", b =>
                {
                    b.HasOne("Estigo.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Estigo.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Estigo.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Estigo.Models.Chapter", b =>
                {
                    b.Navigation("lessons");
                });

            modelBuilder.Entity("Estigo.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Estigo.Models.lesson", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();
                });

            modelBuilder.Entity("Estigo.Models.Student", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Estigo.Models.Teacher", b =>
                {
                    b.Navigation("CoursesTaught");
                });
#pragma warning restore 612, 618
        }
    }
}
